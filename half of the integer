Given an array of integers nums, half of the integers in nums are odd, and the other half are even
#include <stdio.h>
int main() {
    int nums[] = {1, 2, 3, 4, 5, 6, 7, 8};
    int n = sizeof(nums) / sizeof(nums[0]);
    int i, odd = 0, even = 0;
    for (i = 0; i < n; i++) {
        if (nums[i] % 2 == 0) {
            even++;
        } else {
            odd++;
        }
    }
    int odd_nums[odd], even_nums[even];
    odd = 0;
    even = 0;
    for (i = 0; i < n; i++) {
        if (nums[i] % 2 == 0) {
            even_nums[even] = nums[i];
            even++;
        } else {
            odd_nums[odd] = nums[i];
            odd++;
        }
    }
    printf("Odd Numbers: ");
    for (i = 0; i < odd; i++) {
        printf("%d ", odd_nums[i]);
    }
    printf("\nEven Numbers: ");
    for (i = 0; i < even; i++) {
        printf("%d ", even_nums[i]);
    }
}
Output:
Odd Numbers: 1 3 5 7 
Even Numbers: 2 4 6 8
algorithm to separate and print odd and even numbers 
1. Input: Array `nums` of integers.
2. Initialize: Counters `odd` and `even` to 0.
3. Count and Categorize:
   - Iterate through `nums`:
     - Increment `even` if `nums[i]` is even, otherwise increment `odd`.
4.Allocate and Store:
   - Create arrays `odd_nums[]` and `even_nums[]` of sizes `odd` and `even`.
   - Store even numbers in `even_nums[]` and odd numbers in `odd_nums[]`.
5.Output:
   - Print "Odd Numbers: " followed by elements in `odd_nums[]`.
   - Print "Even Numbers: " followed by elements in `even_nums[]`.
