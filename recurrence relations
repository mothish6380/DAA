Write C programs for solving recurrence relations using the Master Theorem, Substitution Method, and Iteration Method will demonstrate how to calculate the time complexity of an example recurrence relation using the specified technique
#include <stdio.h>
int main() {
    int n = 16;
    int a = 2, b = 4, k = 2;
    int result = 1;
    for (int i = 0; i < k; i++)
    {
        result *= a;
    }
    if (result < b)
    {
        printf("T(n) = O(n^log_b(a))\n");
    } else if (result == b)
    {
        printf("T(n) = O(n^log_b(a) * log(n))\n");
    }
    else
    {
        printf("T(n) = O(n^log_b(a))\n");
    }
}
Output:
T(n) = O(n^log_b(a) * log(n))
algorithm
1. Start
2. Initialize `n` to 16.
3. Initialize `a` to 2, `b` to 4, and `k` to 2.
4. Compute `result = a^k`.
5. 
   - If `result < b`, print `T(n) = O(n^log_b(a))`.
   - Else if `result == b`, print `T(n) = O(n^log_b(a) * log(n))`.
   - Else, print `T(n) = O(n^log_b(a))`.
6. End
