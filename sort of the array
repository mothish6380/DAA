. Sort the array so that whenever nums[i] is odd, i is odd, and whenever nums[i] is even, i is even. Return any answer array that satisfies this condition.
#include <stdio.h>
int main() {
    int nums[] = {4, 2, 5, 7, 1, 3, 8, 6};
    int n = sizeof(nums) / sizeof(nums[0]);
    for (int i = 0; i < n; i += 2) {
        for (int j = i + 2; j < n; j += 2) {
            if (nums[i] % 2 != 0 && nums[j] % 2 != 0) {
                int temp = nums[i];
                nums[i] = nums[j];
                nums[j] = temp;
            }
            if (nums[i] % 2 == 0 && nums[j] % 2 == 0) {
                int temp = nums[i];
                nums[i] = nums[j];
                nums[j] = temp;
            }
        }
    }
    printf("Sorted Array: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", nums[i]);
    }
}
Output:
Sorted Array: 8 2 1 7 5 3 4 6
algorithm that sorts an array
1.Input: Integer array nums.
2.Initialization: Two pointers left (starting at 0) and right (starting at n - 1, where n is the size of nums).
3.Two-pointer Technique:
-Move left rightward to find the first odd number (nums[left] % 2 != 0).
-Move right leftward to find the first even number (nums[right] % 2 == 0).
-Swap nums[left] and nums[right] if left < right.
-Repeat until left surpasses right.
Output: Print the sorted array where all even numbers precede odd numbers.

